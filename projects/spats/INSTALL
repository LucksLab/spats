Installation Instructions
*************************

Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005 Free
Software Foundation, Inc.

This file is free documentation; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.

Spats Installation
==================
Spats requires several dependencies before being installed. For up-to-date
installation instructions for these dependencies and spats itself, please
visit http://github.com/LucksLab/spats .

Basic Installation
==================

These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  (Caching is
disabled by default to prevent problems with accidental use of stale
cache files.)

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If you are using the cache, and at
some point `config.cache' contains results you don't want to keep, you
may remove or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You only need
`configure.ac' if you want to change it or regenerate `configure' using
a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Typical Spats Installation
==========================

Please see http://luckslab.github.io/spats/manual.html for the most up to date installation instructions.

A detailed list of instructions for MacOSX (and similarly any Unix environment) that covers most of the Spats v1.0.0 dependencies follows:

Setting up the Shell Environment
--------------------------------
The SHAPE-Seq pipeline currently uses a suite of command-line tools to perform the data analysis pipeline. The Mac OSX command line can be opened up using the Terminal.app found in Applications/Utilities. Follow the steps below to setup a directory system on the local disk that will be used to run SHAPE-Seq data analysis.

 - Open Terminal.app
 - Create a SHAPE-Seq folder in your home directory: mkdir SHAPE-Seq
 - Change into the SHAPE-Seq directory: cd SHAPE-Seq
 - Create the following sub-directories: mkdir src; mkdir bin; mkdir build; mkdir data
  - src/ - will contain the source files for each element of the software pipeline
  - bin/ - will contain the executable files for the software pipeline
  - build/ - will contain files needed to build and compile the software
  - data/ - will contain the raw SHAPE-Seq data
 - Add the bin/ directory to your path
 - open -a TextEdit ~/.bash_profile
 - create the following line: export PATH=$PATH:<path_prefix>/SHAPE-Seq/bin:<path_prefix>/SHAPE-Seq/bin/bin where <path_prefix> is the absolute path to the directory you created SHAPE-Seq in. You can find your path by typing pwd. Typically this will be /Users/<your_username> on a Mac system. On the CBE server this is /fs/europa/g_jbl/Software/ .
 - create the following line: echo "PATH set to" $PATH
 - create the following line: export LD_LIBRARY_PATH=/fs/europa/g_jbl/Software/SHAPE-Seq/bin/lib (this sets the path where dynamically linked libraries can be found).
 - create the following line: echo "LD_LIBRARY_PATH set to" $LD_LIBRARY_PATH
 - save the file
 - in terminal type: source ~/.bash_profile
 - You should see the line "PATH set to (lots of things here)" if this was done correctly this time.
 - Open a new terminal window and type: echo $PATH . You should see "SHAPE-Seq/bin" here if this step was done correctly.
 

Small Read Archive (SRA) Toolkit
--------------------------------
Usage: To convert files obtained from the small read archive into fastq format for processing with the SHAPE-Seq pipeline. This is only required if you want to analyze data available on SRA (i.e. not required for data generated in the lab.)

Software Location: http://www.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software

Installation Instructions:

 - cd ~/SHAPE-Seq
 - Download software.
 - Move the sra toolkit tarball into the src/ directory using the mv command.
 - cd src/
 - Untar the sra toolkit file: tar xzvf sratoolkit.2.1.10-mac64.tar.gz
 - Move the folder created to the build directory: mv sratoolkit.2.1.10-mac64 ../build/
 - Link the binary files into the bin directory:
 - cd ../bin
 - ln -s ../build/sratoolkit.2.1.10-mac64/bin/* .

FastX and Libgtextutils
-----------------------
Usage: FastX is a suite of tools for manipulating NGS data files. Here it is used for trimming adapter sequences from reads.

Software Location: http://github.com/LucksLab/spats

Version Needed: fastx_spats_toolkit_0.0.1 included in the spats repository

Installation Instructions:

 - cd ~/SHAPE-Seq
 - Download the software. You will need Libgtextutils, which can be gotten from: http://hannonlab.cshl.edu/fastx_toolkit/download.html . Get the files  libgtextutils-0.6.1.tar.bz2 (specific link: http://hannonlab.cshl.edu/fastx_toolkit/libgtextutils-0.6.1.tar.bz2). Note that these may be updated from time to time so we'll have to keep this updated. Also get the fastx_spats_toolkit_0.0.1/ files from the spats git repo.
 - Move the tarballs into the src/ directory using the mv command.
 - cd src/
 - Untar the libgtextutil file: tar -xvjf libgtextutils-0.6.tar.bz2
 - Move the folder created to the build directory: mv libgtextutils-0.6 ../build/
 - Change into the libgtextutils build directory: cd ../build/libgtextutils-0.6/
 - Configure the libgtextutils install: ./configure --prefix=<path_prefix>/SHAPE-Seq/bin
 - Note: this requires an absolute directory path so change the <path_prefix> part with your path. You can find your path by typing pwd and copy everything before '/SHAPE-Seq/...'.
 - Note: if there are errors with configure like ./configure: line 15258: AX_C_LONG_LONG: command not found then re-run ./reconf which will copy macro files from the m4 directory for the configuration process.
 - Make: make
 - Install: make install
 - Now tell package config tool where to look for libgtextutils: export PKG_CONFIG_PATH=<path_prefix>/SHAPE-Seq/bin/lib/pkgconfig:$PKG_CONFIG_PATH
 - Once again, replace <path_prefix> with your path as in step 8a above.
 - Copy the folder for fastx within spats to build: cp -r fastx_spats_toolkit_0.0.1 ../build/
 - Change into the FastX build directory: cd ../build/fastx_spats_toolkit_0.0.01/
 - Configure the FastX install: ./configure --prefix=<path_prefix>/SHAPE-Seq/bin
 - See step above for setting <path_prefix> to your path.
 - Make: make
 - Install: make install

Bowtie
------
Usage: Small read aligner used to align Illumina reads to RNA sequences.

Software Location: http://bowtie-bio.sourceforge.net/index.shtml

Version Needed: 0.12.8

Installation Instructions:

 - cd ~/SHAPE-Seq
 - Download the appropriate software for Mac or Linux systems http://sourceforge.net/projects/bowtie-bio/files/bowtie/0.12.8/ .
 - Move the bowtie zip into the src/ directory using the mv command.
 - cd src/
 - Unzip the bowtie zip file: unzip bowtie-0.12.8.zip
 - Move the folder created to the build directory: mv bowtie-0.12.8 ../build/
 - Link the bowtie and bowtie-build binaries into the bin directory (Note ending periods are important.):
 - cd ../bin
 - ln -s ../build/bowtie-0.12.8/bowtie .
 - ln -s ../build/bowtie-0.12.8/bowtie-build .

Boost
-----
Usage: Libraries for efficient data processing.

Software Location: http://www.boost.org/users/download/#live

Version Needed: 1.49.0

Installation Instructions:

 - cd ~/SHAPE-Seq
 - Download the software (boost_1_49_0.tar.gz)
 - Move the boost tarball into the src/ directory using the mv command.
 - cd src/
 - Untar the boost file: tar xzvf boost_1_49_0.tar.gz
 - Move the folder created to the build directory: mv boost_1_49_0 ../build/
 - Change into the boost build directory: cd ../build/boost_1_49_0/
 - Setup the boost build process: ./bootstrap.sh
 - Link bjam to the bin directory (Note ending periods are important.):
 - cd ../../bin
 - ln -s ../build/boost_1_49_0/bjam .
 - cd ../build/boost_1_49_0
 - Follow the detailed installation instructions on the spats website (http://spats.sourceforge.net/installation.html). Note this will differ based on the system you are working on:
 - use the option --prefix=<path_prefix>/SHAPE-Seq/bin, where <path_prefix> is described in 5b of the 'Setting up the Shell Environment' section of this document.
 - Mac: type the command: bjam --prefix=<path_prefix>/SHAPE-Seq/bin/ --toolset=darwin --architecture=x86 --address_model=32_64 --link=static --runtime-link=static --layout=versioned install

Cutadapt
--------
Usage: Adapter trimming utility.

Software Location: https://cutadapt.readthedocs.org/en/stable/

Version Needed: 1.5

Installation Instructions: https://cutadapt.readthedocs.org/en/stable/installation.html

Spats
-----
Usage: The SHAPE-Seq data analysis pipeline.

Software Location: (http://github.com/LucksLab/spats)

Version Needed: 1.0.0

Installation Instructions:

 - cd ~/SHAPE-Seq
 - Download the software.
 - Move the spats tarball into the src/ directory using the mv command.
 - cd src/
 - Untar the spats file: tar xzvf spats-1.0.0.tar.gz
 - Move the folder created to the build directory: mv mv spats-1.0.0 ../build/
 - Change into the spats build directory: cd ../build/spats-1.0.0/
 - Configure the spats install:
 - ./configure --prefix=<path_prefix>/SHAPE-Seq/bin --with-boost=<path_prefix>/SHAPE-Seq/bin
 - If you encounter errors, make sure the LD_LIBRARY_PATH variable is set to where the boost libraries are found. See "Setting Up the Shell Environment" above.
 - If static linking is desired to the following workaround: For some reason the make process can find the boost includes but not the libs. To fix this, a hack is to edit src/Makefile line 689 to be "CXXFLAGS = -Wall -Wno-strict-aliasing -g -gdwarf-2 -m64 -O3 -DNDEBUG -pthread -I/fs/cbe/g_jbl/SHAPE-Seq/bin/include -static" (basically just adding the '-static' flag). The configure process should be changed to add this flag during the generation of src/Makefile. This ensures that the libraries are statically linked to the spats executables.
 - Make: make
 - Install: make install
 - Edit the PATH variable as above to include <path_prefix>/SHAPE-Seq/bin/bin


Compilers and Options
=====================

Some systems require unusual options for compilation or linking that the
`configure' script does not know about.  Run `./configure --help' for
details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix

   *Note Defining Variables::, for more details.

Compiling For Multiple Architectures
====================================

You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not support the `VPATH'
variable, you have to compile the package for one architecture at a
time in the source code directory.  After you have installed the
package for one architecture, use `make distclean' before reconfiguring
for another architecture.

Installation Names
==================

By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PREFIX'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PREFIX', the package will
use PREFIX as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=DIR' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

There may be some features `configure' cannot figure out automatically,
but needs to determine by the type of machine the package will run on.
Usually, assuming the package is built to be run on the _same_
architectures, `configure' can figure that out, but if it prints a
message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the `--target=TYPE' option to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

If you want to set default values for `configure' scripts to share, you
can create a site shell script called `config.site' that gives default
values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

causes the specified `gcc' to be used as the C compiler (unless it is
overridden in the site shell script).  Here is a another example:

     /bin/bash ./configure CONFIG_SHELL=/bin/bash

Here the `CONFIG_SHELL=/bin/bash' operand causes subsequent
configuration-related scripts to be executed by `/bin/bash'.

`configure' Invocation
======================

`configure' recognizes the following options to control how it operates.

`--help'
`-h'
     Print a summary of the options to `configure', and exit.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.

